"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/index.ts
var src_exports = {};
__export(src_exports, {
  FtpError: () => FtpError,
  MulterFtpStorage: () => MulterFtpStorage
});
module.exports = __toCommonJS(src_exports);

// src/MulterFtpStorage.ts
var import_path = __toESM(require("path"));

// src/FtpService.ts
var import_basic_ftp = require("basic-ftp");

// src/exceptions/FtpError.ts
var FtpError = class extends Error {
  /**
   * Initializes a new instance of the FtpError class.
   * @param {string} message - The error message.
   * @param {Error} innerError - The inner error.
   */
  constructor(message, innerError) {
    super(innerError ? `${message}
${innerError.message}` : message);
    this.name = this.constructor.name;
    this.innerError = innerError;
  }
  /** @inheritdoc */
  toString() {
    return this.innerError ? `${this.message}
${this.innerError.toString()}` : this.message;
  }
};

// src/FtpService.ts
var FtpService = class {
  /**
   * Initializes a new instance of the FTPFileService class.
   * @param {FtpConfig} ftpConfig - The FTP configuration.
   */
  constructor(ftpConfig) {
    this.ftpConfig = ftpConfig;
    this.basepath = (ftpConfig.basepath || "") + "/";
  }
  /**
   * Uploads a file to the FTP server.
   * @param {internal.Readable} file - The file stream to upload.
   * @param {string} remotePath - The remote path where to upload the file.
   */
  uploadFile(file, remotePath) {
    return __async(this, null, function* () {
      yield this.createFolder(remotePath.split("/").slice(0, -1).join("/") || "/");
      const client = yield this.getClient();
      const finalPath = this.basepath + remotePath;
      try {
        yield client.uploadFrom(file, finalPath);
      } catch (error) {
        throw new FtpError(`Failed to upload file : ${finalPath}`, error);
      } finally {
        client.close();
      }
    });
  }
  /**
   * Deletes a file from the FTP server.
   * @param {string} path - The path of the file to delete.
   */
  deleteFile(path2) {
    return __async(this, null, function* () {
      if (!path2) {
        return;
      }
      const client = yield this.getClient();
      const finalPath = this.basepath + path2;
      try {
        yield client.remove(finalPath, true);
      } catch (error) {
        throw new FtpError(`Failed to delete file : ${finalPath}`, error);
      } finally {
        client.close();
      }
    });
  }
  /**
   * Creates a folder on the FTP server.
   * @param {string} dir - The path of the folder to create.
   */
  createFolder(dir) {
    return __async(this, null, function* () {
      if (!dir) {
        return;
      }
      const client = yield this.getClient();
      const finalPath = this.basepath + dir;
      try {
        yield client.ensureDir(finalPath);
      } catch (error) {
        throw new FtpError(`Failed to determine if the directory exists : ${finalPath}`, error);
      } finally {
        client.close();
      }
    });
  }
  /**
   * Gets FTP client.
   * @returns {Promise<Client>} The FTP client.
   */
  getClient() {
    return __async(this, null, function* () {
      try {
        const client = new import_basic_ftp.Client();
        yield client.access(this.ftpConfig);
        return client;
      } catch (error) {
        throw new FtpError("Failed to connect to the FTP server.", error);
      }
    });
  }
};

// src/MulterFtpStorage.ts
var defaultOptions = {
  fileNameFn: (req, file) => {
    const name = file.originalname.split(" ").join("-").replace(/(\W+)/gi, "-") + Date.now() + import_path.default.extname(file.originalname);
    return name;
  }
};
var MulterFtpStorage = class {
  /**
   * Initializes a new instance of the MulterFTPStorage class.
   * @param {Config} config - The configuration.
   */
  constructor(config) {
    this.ftpService = new FtpService(config.ftp);
    this.options = config.multer;
  }
  /** @inheritdoc */
  _handleFile(req, file, cb) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      try {
        const filename = ((_b = (_a = this.options) == null ? void 0 : _a.fileNameFn) == null ? void 0 : _b.call(_a, req, file)) || ((_c = defaultOptions.fileNameFn) == null ? void 0 : _c.call(defaultOptions, req, file));
        yield this.ftpService.uploadFile(file.stream, filename);
        cb(null, {
          path: file.path,
          size: file.size,
          filename,
          originalname: file.originalname,
          destination: this.ftpService.basepath + filename
        });
      } catch (error) {
        cb(error);
      }
    });
  }
  /** @inheritdoc */
  _removeFile(req, file, cb) {
    return __async(this, null, function* () {
      try {
        yield this.ftpService.deleteFile(file.filename);
        cb(null);
      } catch (error) {
        cb(error);
      }
    });
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  FtpError,
  MulterFtpStorage
});
