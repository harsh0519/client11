import { Request } from 'express';
import { StorageEngine } from 'multer';
import { AccessOptions } from 'basic-ftp';

type FtpConfig = AccessOptions & {
    basepath?: string;
};

type StorageOptions = {
    fileNameFn?: (req: Request, file: Express.Multer.File) => string;
};

type Config = {
    ftp: FtpConfig;
    multer?: StorageOptions;
};

/**
 * Defines the FTP Multer storage engine.
 */
declare class MulterFtpStorage implements StorageEngine {
    private ftpService;
    private options?;
    /**
     * Initializes a new instance of the MulterFTPStorage class.
     * @param {Config} config - The configuration.
     */
    constructor(config: Config);
    /** @inheritdoc */
    _handleFile(req: Request, file: Express.Multer.File, cb: (error?: Any, info?: Partial<Express.Multer.File>) => void): Promise<void>;
    /** @inheritdoc */
    _removeFile(req: Request, file: Express.Multer.File, cb: (error: Error | null) => void): Promise<void>;
}

/**
 * Define a custom error class for FTP errors.
 */
declare class FtpError extends Error {
    innerError?: Error;
    /**
     * Initializes a new instance of the FtpError class.
     * @param {string} message - The error message.
     * @param {Error} innerError - The inner error.
     */
    constructor(message: string, innerError?: Error);
    /** @inheritdoc */
    toString(): string;
}

export { type Config, type FtpConfig, FtpError, MulterFtpStorage, type StorageOptions };
